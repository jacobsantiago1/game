'''
game thingy!
'''
# to install, type: "pip install pygame"
import pygame # this is a non-core library which will help with writing games in pythonxxwsxwsxwsxwsxwsx

# random and sys are CORE LIBRARIES - no need to install them
import random # random
import sys
import pygame_gui
import time # time stuff
import os

pygame.init() # initiate pygamexwsxw
clock = pygame.time.Clock()
pygame.font.init()
font = pygame.font.SysFont("", 50)

# ez variables
WIDTH = 1280
HEIGHT = 720
SKYBLUE = (135, 206, 235)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

jumpHeight = -25
playerHeight = 100
playerWidth = 30

# username word list
word_list = ["Inferno", "Sigma", "Slick", "Freakous", "Great", "Wind", "Thunder", "Dragon", "Hunger", "Raven", "Operator", "Agent", "Bear", "Storm"]

# more variables
score = 0
highScore = 0
username = "Guest User"
gamedifficulty = 1

CLOCK = pygame.time.Clock()
NAMEMANAGER = pygame_gui.UIManager((WIDTH, HEIGHT))
DIFFMANAGER = pygame_gui.UIManager((WIDTH, HEIGHT))
menunametextinput = pygame_gui.elements.UITextEntryLine(relative_rect=pygame.Rect((30, 525), (220, 50)), manager=NAMEMANAGER, object_id="#nametextentry")
menudifftextinput = pygame_gui.elements.UITextEntryLine(relative_rect=pygame.Rect((30, 315), (220, 50)), manager=DIFFMANAGER, object_id="#difftextentry")

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Where The Wind Goes")

# Load images
button1 = pygame.image.load("img/playbtn.png").convert_alpha()
button2 = pygame.image.load("img/exitbtn.png").convert_alpha()
button3 = pygame.image.load("img/replaybtn.png").convert_alpha()
namebtn = pygame.image.load("img/namebtn.png").convert_alpha()
diffbtn = pygame.image.load("img/modebtn.png").convert_alpha()
menubtn = pygame.image.load("img/menubtn.png").convert_alpha() 
backgroundscreen = pygame.image.load("img/sprite_4.png").convert_alpha()
endgamescreen = pygame.image.load("img/bgscreen.gif").convert_alpha()  

# load high scre from file
def load_high_score():
    global highScore
    if os.path.exists("high_score.txt"):
        with open("high_score.txt", "r") as file:  
            highScore = int(file.read())

def save_high_score():
    with open("high_score.txt", "w") as file:
        file.write(str(highScore))

# Button class
class button():
    def __init__(self, x, y, image, scale, hovertxt, hovertxtpos):
        self.original_image = image  # Store original image
        btnwidth = image.get_width()
        btnheight = image.get_height()
        self.scale = scale
        self.hover_scale = scale * 1.2  # Increase size by 20% on hover
        self.hovertxt = hovertxt
        self.hovertxtpos = hovertxtpos
        # Scale the original image
        self.image = pygame.transform.scale(image, (int(btnwidth * scale), int(btnheight * scale)))
        self.rect = self.image.get_rect(topleft=(x, y))  # Keep center fixed

        self.clicked = False



    def draw(self, screen, events):
        action = False
        pos = pygame.mouse.get_pos()

        # If mouse hovers, scale up but keep the center position
        if self.rect.collidepoint(pos):
            scaled_width = int(self.original_image.get_width() * self.hover_scale)
            scaled_height = int(self.original_image.get_height() * self.hover_scale)
            self.image = pygame.transform.scale(self.original_image, (scaled_width, scaled_height))

            hovertxt = font.render(self.hovertxt, True, (0,0,0))
            screen.blit(hovertxt, (self.hovertxtpos))
        else:
            # Reset to normal size
            scaled_width = int(self.original_image.get_width() * self.scale)
            scaled_height = int(self.original_image.get_height() * self.scale)
            self.image = pygame.transform.scale(self.original_image, (scaled_width, scaled_height))

        # Keep the button centered
        self.rect = self.image.get_rect(center=self.rect.center)

        # Process events (pass events from main loop to avoid conflicts)
        for event in events:
            if event.type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(pos):
                action = True

        screen.blit(self.image, self.rect.topleft)
        return action
        
# button instances
playbuttoninstance = button(850, 485, button1, 2, "", (950,200))
exitbuttoninstance = button(30, 600, button2, 1, "Leave Game", (250, 625))
namebuttoninstance = button(30, 390, namebtn, 1, "Enter your username!", (300,415))
diffbuttoninstance = button(30, 170, diffbtn, 1, "Set the difficulty! 1-3", (300,195))

def menuscreen():
    global score, highScore, username, gamedifficulty
    score = 0

    menurun = True
    namemenu = False
    diffmenu = False
    gamedifficulty = gamedifficulty # dont reset gamediff
    print(gamedifficulty) # debugging
    username = username

    while menurun:
        UI_refresh_rate = CLOCK.tick(60) / 1000  # framerate stability
        screen.fill(SKYBLUE)  # replace with background image
        screen.blit(backgroundscreen, (0,-50))

        # username text
        usernametxt = font.render(f"{username}", False, (0, 0, 0,))
        screen.blit(usernametxt, (10, 10))
        difficultytxt = font.render(f"{gamedifficulty}", False, (0,0,0))
        screen.blit(difficultytxt, (1250, 10))

        events = pygame.event.get()  # get all events 1ce per frame

        # process events
        for event in events:
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame_gui.UI_TEXT_ENTRY_FINISHED and event.ui_object_id == "#nametextentry": # text input entered?
                username = (event.text)
                print(f"Username: {username}, Difficulty: {gamedifficulty}")
                namemenu = False
                maxusernamelen = 12
                if len(username) > maxusernamelen: # max username boun dary
                    username = randomusername()

            elif event.type == pygame_gui.UI_TEXT_ENTRY_FINISHED and event.ui_object_id == "#difftextentry": # text input entered
                gamedifficulty = event.text.strip() 
                diffmenu = False
                print(f"Username: {username}, Difficulty: {gamedifficulty}")
                if gamedifficulty.isdigit(): # integer checker boundary
                    gamedifficulty = int(gamedifficulty)
                    print(gamedifficulty)   
                    if gamedifficulty >= int(4):
                        print("no")
                        gamedifficulty = 3
                        print(gamedifficulty)
                else:
                    gamedifficulty = 3
                    

            NAMEMANAGER.process_events(event)  # ui event processing adfadadf
            DIFFMANAGER.process_events(event)

        # update buttons
        if playbuttoninstance.draw(screen, events):
            if username != "Guest User":
                menurun = False
            else:
                enterusernametxt = font.render("enter username", False, (0,0,0))
                screen.blit(enterusernametxt, (10,60))
                namemenu = True


        if exitbuttoninstance.draw(screen, events):
            pygame.quit()
            sys.exit()

        # difficulty buton
        if diffbuttoninstance.draw(screen, events):
            if diffmenu != False:
                diffmenu = False
                namemenu = False
            else:
                diffmenu = True    

        if diffmenu == True:
            DIFFMANAGER.update(UI_refresh_rate)  
            DIFFMANAGER.draw_ui(screen)
        elif diffmenu == False:
            pass

        # name button
        if namebuttoninstance.draw(screen, events):
            if namemenu != False:
                namemenu = False
                diffmenu = False
            else:
                namemenu = True

        if namemenu == True:
            NAMEMANAGER.update(UI_refresh_rate)  
            NAMEMANAGER.draw_ui(screen)
        elif namemenu == False:
            pass
    
        pygame.display.flip()  # update display

    return username, int(gamedifficulty)

def randomusername():
    username = random.choice(word_list) + random.choice(word_list) + str(random.randint(1, 99))
    return username

username, gamedifficulty = menuscreen()

'''player class'''
class Player:
    def __init__(self, speed, x, y, gravity=0.5, fall_multiplier=1.5,): # player charactaristics

        # self.rect = pygame.Rect(x, y, playerWidth, playerHeight)

        # load images  
        self.image_standing = pygame.image.load("img/playerstand.png").convert_alpha()
        self.image_jumping = pygame.image.load("img/playerjump.png").convert_alpha()

        # default image
        self.image = self.image_standing 

        # default hitbox image size
        self.rect = self.image.get_rect(midbottom=(100, HEIGHT))

        # hitboxes

        self.hitbox_standing = pygame.Rect(self.rect.x, self.rect.y, self.rect.width, self.rect.height)  
        self.hitbox_jumping = pygame.Rect(self.rect.x + 10, self.rect.y, self.rect.width + 60, self.rect.height - 30)  
        self.hitbox_crouching = pygame.Rect(self.rect.x + 5, self.rect.y + 10, self.rect.width - 10, self.rect.height - 20)  

        # default hitbox
        self.hitbox = self.hitbox_standing
        
        # other stuff
        self.speed = 10
        self.gravity = gravity
        self.velocity = pygame.Vector2(0,0)
        self.jump_cutoff = 0.5  # how much velocity lost when key released early
        self.fall_multiplier = fall_multiplier  # increases falling speed
        self.on_ground = False  # is the player on the ground?if keys[pygame.K_c]:
        

    def movementEngine(self, keys):
        # x movement
        self.velocity.x = 0
        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.velocity.x = -self.speed
        if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.velocity.x = self.speed

        # gravity application
        if self.velocity.y > 0:  # If falling, apply extra gravity
            self.velocity.y += self.gravity * self.fall_multiplier
        else:  # Normal gravity when rising
            self.velocity.y += self.gravity 

        # jumping
        if (keys[pygame.K_SPACE] or keys[pygame.K_w] or keys[pygame.K_UP]) and self.on_ground:
            self.velocity.y = jumpHeight  # how high the player can jump

        # jump cutoff
        if not (keys[pygame.K_SPACE] or keys[pygame.K_w] or keys[pygame.K_UP]) and self.velocity.y < 0: # if key space is pressed
            self.velocity.y *= self.jump_cutoff 

        # ground smash thing SLIDE
        if (keys[pygame.K_s] or keys[pygame.K_DOWN]) and self.on_ground == False:
            self.velocity.y += 2

        # pause
        if keys[pygame.K_ESCAPE]:
            print("pause")
            clock.tick(0)
        
        # movement application
        self.rect.x += self.velocity.x
        self.rect.y += self.velocity.y

        # stop player from exititing walls
        if self.rect.left < 0:  # Prevent moving past left wall
            self.rect.left = 0
        if self.rect.right > WIDTH:  # Prevent moving past right wall
            self.rect.right = WIDTH

        # groundcheck
        if self.rect.bottom >= HEIGHT:  # ground sim
            self.rect.bottom = HEIGHT
            self.on_ground = True
            self.velocity.y = 0
        else:
            self.on_ground = False

        # frame change
        if self.on_ground:
            self.image = self.image_standing  # standing
            self.hitbox = self.hitbox_standing

        else:
            # print("hello")
            self.image = self.image_jumping  # jumping
            self.hitbox = self.hitbox_jumping
            
        self.hitbox.topleft = (self.rect.x, self.rect.y)


    def draw(self, screen):
        screen.blit(self.image, self.rect)
        # pygame.draw.rect(screen, (0, 255, 0), self.hitbox, 2)  # debugging hitbox

'''obstacle code'''
class FlyingObstacle:
    def __init__(self, x, y, speed,):       
        self.speed = speed
        if speed > 8:
            self.rect = pygame.Rect(x, y, 50, 50)  # Obstacle hitbox    
        else:
            self.rect = pygame.Rect(x, y, 50, 300)
    def update(self):
        self.rect.x -= self.speed  # Move left

    def draw(self, screen):
        pygame.draw.rect(screen, RED, self.rect)  # Red rectangle

'''game over screen code'''
def game_over_screen():
    global score, highScore, username, gamedifficulty


    score = 0

    save_high_score()
    
    gameOverScreenRunning = True
    exitbuttoninstance = button(40, 590, button2, 1, "", (0,0)) # exit button instance
    replaybuttoninstance = button(1050, 500, button3, 1, "", (0,0)) # restart button instance
    menubuttoninstance = button(800, 590, menubtn, 1, "", (0,0)) # menubttoninstance
    while gameOverScreenRunning:
        screen.blit(endgamescreen, (0, 0))  # Redraw background every frame
        events = pygame.event.get()  # Get events ONCE per frame

        # Draw buttons
        if exitbuttoninstance.draw(screen, events):
            pygame.quit()
            exit()
        
        if replaybuttoninstance.draw(screen, events):
            gameOverScreenRunning = False

        if menubuttoninstance.draw(screen, events):
            _, gamedifficulty = menuscreen()
            gamedifficulty = int(gamedifficulty)
            gameOverScreenRunning = False
            maingameloop(gamedifficulty)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()

        pygame.display.flip()  # Update screen

def pausemenu(screen):
    gamepaused = True

    overlay = pygame.Surface(screen.get_size(), pygame.SRCALPHA)
    overlay.fill((0, 0, 0, 180))
    pausetxt = font.render("Game Paused | Press ESC to resume", True, (255,255,255))
    text_rect = pausetxt.get_rect(center=(screen.get_width() // 2, screen.get_height() // 2))
    screen.blit(overlay, (0,0))
    screen.blit(pausetxt, text_rect)
    pygame.display.update() 
    while gamepaused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    gamepaused = False
    
# Initialize player
player = Player(WIDTH // 2, HEIGHT // 2, 1)

'''main game loop'''
def maingameloop(gamedifficulty):
    obstacles = [] # list to store obstacles
    spawn_timer = 0  # spawning control
    gamerunning = True
    global score, highScore
    load_high_score()

    while gamerunning:
        clock.tick(60)  # 60fps
        screen.fill(SKYBLUE)  # fill screen with background colour
        usernametxt = font.render(f"{username}", False, (0, 0, 0,))
        score_text = font.render(f"Score: {score}", True, (0,0,0))
        high_score_text = font.render(f"High Score: {highScore}", True, (0,0,0))
        screen.blit(usernametxt, (10, 10))
        screen.blit(score_text, (450, 0))
        screen.blit(high_score_text, (450, 50))

        # event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gamerunning = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pausemenu(screen)

        # movement engine handling
        keys = pygame.key.get_pressed()
        player.movementEngine(keys)

        score += (1 * gamedifficulty)

        if score > highScore:
            highScore = score


            # respawn obstacle every X amount of frames
        spawn_timer += gamedifficulty
        if spawn_timer > 60: 
            y_position = random.randint(50, HEIGHT - 100)  # spawn at a random height
            obstacles.append(FlyingObstacle(WIDTH, y_position, speed=random.randint(1,15))) # create copy of obstacle
            spawn_timer = 0

        # update and draw
        for obstacle in obstacles[:]:
            obstacle.update()
            obstacle.draw(screen)

            # collision detection
            if player.hitbox.colliderect(obstacle.rect):
                game_over_screen()
                obstacles.clear()
                player.rect.topleft = (50, HEIGHT // 2)
                spawn_timer = 0
                save_high_score()

            # delete off screen blocks
            if obstacle.rect.right < 0:
                obstacles.remove(obstacle)

        

        # draw everything
        player.draw(screen)

        pygame.display.flip()  # update

    pygame.quit()

maingameloop(gamedifficulty)


